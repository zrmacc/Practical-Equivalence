return(cdf)
}
cdf(0)
#############################################################
### Calculate exact probas for sample_size = seq(10,50,5)
#############################################################
sample_size = seq(10,50,5)
probas_greater_zero <- c()
for(i in sample_size){
cdf <- function(t){
a1=a2=i
b1=(1-p_censor)/true_lambda_other_trt
b2=(1-p_censor)/true_lambda_best_trt
integrand <- function(x) { x^(a2-1) * exp(-b2*x) * integrate(lower.inc.gam, lower=0, upper=(b1*(x+t)),a1=a1)$value }
vint <- Vectorize(integrand , "x")
d=(b2^(a2))/(gamma(a1)*gamma(a2))
cdf <- d * integrate(vint, lower = max(0,-t), upper = Inf)$value # ,t=t,b1=b1,a2=a2,b2=b2 ,b1=b1,a2=a2,b2=b2
return(cdf)
}
proba_greater_zero <- 1-cdf(0)
proba_greater_zero
probas_greater_zero <- c(probas_greater_zero, proba_greater_zero)
}
plot(sample_size, probas_greater_zero, type="b", col="red", ylim=c(0,1),ylab="probability of correct selection", xlab="sample size per arm")
sample_size
probas_greater_zero
#############################################################
###### normal approximation for sample_size = seq(10,50,5)
#############################################################
delta=log(true_lambda_other_trt) - log(true_lambda_best_trt)
probas_greater_zero_normal <- c()
for(i in sample_size){
sum_variances= 2 * ( (1)/(i*(1-p_censor)) )
proba_greater_zero <- 1-pnorm(0,mean=delta,sd=sum_variances^0.5)
proba_greater_zero
probas_greater_zero_normal <- c(probas_greater_zero_normal , proba_greater_zero)
}
lines(sample_size, probas_greater_zero_normal, type="b", col="blue", ylim=c(0,1),ylab="probability of correct selection", xlab="sample size per arm")
probas_greater_zero_normal
#############################################################
###### verification by simulation
#############################################################
n.sim=1000
p_censor=p_censor
probas_greater_zero_sims <- c()
for(z in sample_size){
lambdas_difference <- c()
for(i in 1:n.sim){
data_best = genData(n=z,dist="exp",theta=c(true_lambda_best_trt),p=p_censor)
data_best
lambda_hat_best <- sum(data_best$status)/sum(data_best$time)
lambda_hat_best
data_other = genData(n=z,dist="exp",theta=c(true_lambda_other_trt),p=p_censor)
data_other
lambda_hat_other <- sum(data_other$status)/sum(data_other$time)
lambda_hat_other
lambdas_difference <- c(lambdas_difference, lambda_hat_other - lambda_hat_best)
}
proba_correct <- mean(ifelse(lambdas_difference>0,1,0))
proba_correct
probas_greater_zero_sims <- c(probas_greater_zero_sims, proba_correct)
}
probas_greater_zero_sims
lines(sample_size, probas_greater_zero_sims, type="b", col="black", ylim=c(0,1),ylab="probability of correct selection", xlab="sample size per arm")
legend("bottomright",
legend = c("normal approximation", "simulations", "exact result"),
col = c("blue","black","red"), lty=1)
df2
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
)
q
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
)
q
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
)
show(q)
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_brewer(
palette = "spectral"
)
q
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_brewer(
palette = "Spectral"
)
q
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_manual(
name = "Method",
labels = c("Empirical", "Exact"),
values = c("#C65842", "#6385B8")
)
q
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_linerange(
data = df,
aes(x = n, ymin = lower, ymax = upper),
color = "gray"
) +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_manual(
name = "Method",
labels = c("Empirical", "Exact"),
values = c("#C65842", "#6385B8")
)
q
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_linerange(
data = df,
aes(x = n, ymin = lower, ymax = upper),
color = "gray"
) +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::lims(
y = c(0, 1.0)
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_manual(
name = "Method",
labels = c("Empirical", "Exact"),
values = c("#C65842", "#6385B8")
) +
ggplot2::theme(
legend.position = "top"
)
q
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_linerange(
data = df,
aes(x = n, ymin = lower, ymax = upper),
color = "gray"
) +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::lims(
y = c(0.5, 1.0)
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_manual(
name = "Method",
labels = c("Empirical", "Exact"),
values = c("#C65842", "#6385B8")
) +
ggplot2::theme(
legend.position = "top"
)
show(q)
ggplot2::ggsave(
filename = "Figures/order_prob_by_sample_size.png",
plot = q,
width = 7.0,
height = 3.5,
units = "in",
dpi = 480
)
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_linerange(
data = df,
aes(x = n, ymin = lower, ymax = upper),
color = "gray"
) +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::lims(
y = c(0.5, 1.0)
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_manual(
name = "Method",
labels = c("Empirical", "Exact"),
values = c("#C65842", "#6385B8")
) +
ggplot2::theme(
legend.position = c(10, 0.9)
)
q
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_linerange(
data = df,
aes(x = n, ymin = lower, ymax = upper),
color = "gray"
) +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::lims(
y = c(0.5, 1.0)
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_manual(
name = "Method",
labels = c("Empirical", "Exact"),
values = c("#C65842", "#6385B8")
) +
ggplot2::theme(
legend.position = c(0.1, 0.9)
)
q
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_linerange(
data = df,
aes(x = n, ymin = lower, ymax = upper),
color = "gray"
) +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::lims(
y = c(0.5, 1.0)
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_manual(
name = "Method",
labels = c("Empirical", "Exact"),
values = c("#C65842", "#6385B8")
) +
ggplot2::theme(
legend.position = c(0.1, 0.8)
)
show(q)
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_linerange(
data = df,
aes(x = n, ymin = lower, ymax = upper),
color = "gray"
) +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::lims(
y = c(0.5, 1.0)
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_manual(
name = nullspace(),
labels = c("Empirical", "Exact"),
values = c("#C65842", "#6385B8")
) +
ggplot2::theme(
legend.position = c(0.15, 0.8)
)
show(q)
q <- ggplot2::ggplot(df2) +
ggplot2::theme_bw() +
ggplot2::geom_linerange(
data = df,
aes(x = n, ymin = lower, ymax = upper),
color = "gray"
) +
ggplot2::geom_line(
aes(x = n, y = prob, color = method),
size = 1
) +
ggplot2::geom_point(
aes(x = n, y = prob, color = method),
) +
ggplot2::labs(
x = "Sample Size",
y = "Probability"
) +
ggplot2::lims(
y = c(0.5, 1.0)
) +
ggplot2::ggtitle(
expression(Empirical~and~Exact~Prob~hat(lambda)[1]<hat(lambda)[2]~by~Sample~Size)
) +
ggplot2::scale_color_manual(
name = NULL,
labels = c("Empirical", "Exact"),
values = c("#C65842", "#6385B8")
) +
ggplot2::theme(
legend.position = c(0.15, 0.8)
)
show(q)
ggplot2::ggsave(
filename = "Figures/order_prob_by_sample_size.png",
plot = q,
width = 7.0,
height = 3.5,
units = "in",
dpi = 480
)
GammaDiffSim <- function(
n,
rate1,
rate2,
mc_iter = 1e4
) {
trial <- function(i) {
return(rgamma(n = 1, shape = n, rate = rate1) <
rgamma(n = 1, shape = n, rate = rate2))
}
sim <- sapply(seq_len(mc_iter), trial)
return(mean(sim))
}
# -----------------------------------------------------------------------------
# Comparisons.
set.seed(10101)
rate1 <- 1.0
rate2 <- 1.2
sample_sizes <- seq_len(100)
exact_probs <- sapply(sample_sizes, function(n) {ExactProb(n, rate2, rate1)})
emp_probs <- sapply(sample_sizes, function(n) {GammaDiffSim(n, rate1, rate2)})
# Compare empirical and exact probabilities.
fit <- lm(emp_probs ~ 0 + exact_probs)
slope <- coef(fit)
df <- data.frame(emp = emp_probs, exact = exact_probs)
q <- ggplot2::ggplot(data = df) +
ggplot2::theme_bw() +
ggplot2::stat_smooth(
aes(x = exact, y = emp),
linetype = "dashed",
formula = "y ~ x",
color = "gray",
method = "lm",
se = FALSE
) +
ggplot2::geom_point(
aes(x = exact, y = emp),
color = "royalblue"
) +
ggplot2::labs(
x = "Exact Probability",
y = "Empirical Probability"
) +
ggplot2::ggtitle(
"Empirical vs. Exact Prob Gamma(n, rate1) < Gamma(n, rate2)"
) +
ggplot2::annotate(
geom = "text",
x = 0.15,
y = 0.4,
label = sprintf("Slope: %.3f", slope)
)
show(q)
ggplot2::ggsave(
filename = "Figures/gamma_order_prob.png",
plot = q,
width = 7.0,
height = 3.5,
units = "in",
dpi = 480
)
# Add library path
library(devtools)
library(roxygen2)
# Creates package
setwd("~/Documents/Lab/Projects/Practical Equivalence/PracticalEquiDesign/")
## Documents package
devtools::document()
# Install
setwd("..")
devtools::install(pkg="PracticalEquiDesign", reload = TRUE)
setwd("PracticalEquiDesign/")
# Check package
# devtools::check()
